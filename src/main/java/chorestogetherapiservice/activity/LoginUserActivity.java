package chorestogetherapiservice.activity;

import chorestogetherapiservice.domain.SocialIdToken;
import chorestogetherapiservice.domain.SocialLoginServiceType;
import chorestogetherapiservice.handler.ResponseHandler;
import javax.inject.Inject;
import javax.validation.constraints.NotNull;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * LoginUser API entry class.
 *
 * <p>
 *   Currently only 3rd-party login (a.k.a Social-Login) is supported.
 *   To login to our service to receive our service's token,
 *   user should first follow OIDC process at frontend with 3rd party service that user chose
 *   (e.x. Google, Kakatalk).
 *   Once done, token id should be returned by the 3rd party.
 *   This API will validate that id token with its service library, and if succeed,
 *   our service generates token and returns.
 * </p>
 */
@Path("/login")
public class LoginUserActivity {

  final private ResponseHandler responseHandler;

  @Inject
  public LoginUserActivity(ResponseHandler responseHandler) {
    this.responseHandler = responseHandler;
  }

  /**
   * Log in with Google's id token.
   *
   * @param  socialIdToken Id token generated by Google
   * @return               HTTP Json Response, with body containing our service's token.
   * */
  @POST
  @Path("/google")
  @Consumes(MediaType.APPLICATION_JSON)
  @Produces(MediaType.APPLICATION_JSON)
  public Response googleLogin(@NotNull SocialIdToken socialIdToken) {
    SocialLoginServiceType socialLoginServiceType = SocialLoginServiceType.GOOGLE;
    return responseHandler.generateFailResponseWith(
        socialLoginServiceType + " login is not implemented yet");
  }


  /**
   * Log in with KakaoTalk's id token.
   *
   * @param  socialIdToken Id token generated by KakaoTalk
   * @return               HTTP Json Response, with body containing our service's token.
   * */
  @POST
  @Path("/kakaotalk")
  @Consumes(MediaType.APPLICATION_JSON)
  @Produces(MediaType.APPLICATION_JSON)
  public Response kakaoTalkLogin(@NotNull SocialIdToken socialIdToken) {
    SocialLoginServiceType socialLoginServiceType = SocialLoginServiceType.KAKAO;
    return responseHandler.generateFailResponseWith(
        socialLoginServiceType + " login is not implemented yet");
  }

}
